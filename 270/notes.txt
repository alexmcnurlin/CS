Professor: Bob Rinker
Office Hours: TBD
Website: www2.cs.uidaho.edu/~rinker/cs270
Final: Dec 15, Thu 15:00-17:00

Mon, Aug 22
  Bell Labs et al contributing to MULTICS (Multiplexed Information and Computing Service)
  MULTICS -> UNICS -> UNIX
  C was invented to write code for UNIX
  People involved
    - Kernigan
    - Ritchie
    - Thompson
  Bell distributed the OS to Universities for low cost.
  Bell Labs started charging liscencing fees. 
  Universities and others made clones (UNIX like) to have similar functionality for free
    - BSD
    - MINIX
  Evenutally, Linus Torvalds made a clone of MINIX to do what he wanted (LINUX)

Wed, Aug 24
  Process: Program in execution


Wed, Aug 31
  Function Declaration: Code that states a function or variable exists (Like a prototype!)
  Function Definition: The actual definition of the code (The function body)
  Function Initialization: Assigning a value to a variable
  Defined once, declared multiple times
  extern: States that a variable is declared in an included file (eg `extern int x`)

Fri, Sep 2
  Elf files
    readelf: reads the elf file
      -a: Shows all data
    Section headers:
      .data: Global initialized data
      .bss: Global uninitialized data


Fri, Sep 9
  elf - Linux only
  coff - Windows (.exe)
  macho - MacOS (.com)

  Linux utilities
    cancel
    cat
    chgrp
    chmod
    chown
    clear
    cp
    dateemacs
    filegroups
    headlp
    lpr
    lprm
    lpq
    lpstat
    ls
    mail
    manmkdir
    moremv
    nnewgrp
    passwd
    pwd
    rm
    rmdir
    rtty
    tailtset
    vim
    wc


Wed, Sep 14
  Contiguous
    * Simple and efficient, but
    * Not very flexible, but
    * other formats strive for it
    - EX: CD-ROM
  Linked List
    * Great for sequential access, but
    * Not so good for random access
    * File Allocation Table (FAT) - links in separate table
    - EX: DOS and FAT (USB drives)
  Indexed
    * Good for both random and sequental access, but
    * Large files require lots of indices
    * Unix uses indirect blocks

  Master Boot Record:
    * BIOS transfers to location 0000h
    * Locate "active" partition
    * Load first sector of partition into memory
    * Transfer execution to that code

Fri, Sep 16
  Declaration:
    Variable or function is said to exist
    extern int i;
  Definition:
    Memory is actually set aside for the variable
    int i;
  Initialization
    Variable is actually assigned a value
    int i = 2;


Mon, Sep 19
  Pointers, again!
    char a[2][15] = {"abc:  ", "a is for apple"};
      - Stored contiguously in memory
    char *p[2] = {"abc:  ", "a is for apple"};
      - Stores 2 pointers, which could be anywhere in memory

  Function arguments
    int main(int argc, char *argv[])
    
    argc - The number of arguments on the command line (including the command name)
    argv - Pointer to the array of pointers to char, an array of strings containing the command line arguments
    argv[0] - The command name itself

Wed, Sep 21
  Classical Squence
    editor -> *source file* -> compiler -> *assembly-language file* -> assembler -> *object file* -> linker -> *executable* ->  loader -> *running program in memory*
  
  Optimization
    - Code generated by a compiler is usually optimized to make it faster, smaller, or both
    - Other optimizations may be done by the assembler, linker, and/or loader
    - A misnomer: The resulting code is better, but not guaranteed to be optimal

    ```
    int i=0;
    while (i<100) {
      a[i++] = x*x*x;
    }

    // Loop invariant removal
    int i=0;
    int temp = x*x*x;
    while (i<100) {
      a[i++] = temp;
    }
    ```

    - Some optimiztions add variables
    - Some remove variables, some add variables. Move code. Add code
    - All make the connection between source code an object code more complicated
    - A simple question, such as "What assembly language code was generated for this statement?" may have a complicated answer.


Mon, Oct 3
  Shell commands
    - alias
      * alias command to a different command
    - bg
    - builtin
    - case..in..esac
    - cd
    - declare
      * Will declare a variable
      * -a Will declare it as an array
    - dirs
    - env
      * Runs a new environment with the specified environment variables
    - export
      * Marks the specified variables for export to the environment. 
    - fg
    - for..do..done
    - function
    - history
    - if..then..elif..then..else..fi
    - jobs
    - kill
    - local
    - popd
    - pushd
    - read
      * Reads a line of text from STDIN
      * read var1 var2
        - Reads first word into var1 and second into var2
    - readonly
    - return
    - select..do..done
    - set
    - source
    - trap
    - unalias
    - unset
    - until..do..done
    - while..do..done

  Variables
    $name, ${name}

  $. current shell options assigned from command line
  $$ process ID for this shell
  $! Process ID of the last basckground command
  $# number of positional parameters
  
  !! replaced with last command
  !n replaced with the nth command in the shell
  !.n replaced with the text of the nth command
  !prefix search for the last command starting with prefix
  !?substring? replaced with the text of the last command containing substring

  (( operation )) 
    - Math!
    - Operators
      +, -, ++, --, *, /, %, **, <=, >=, <, >, ==, !=, 

Wed, Oct 5
  declare -i variable=1 # Declare $variable to be an int
  (( something = somethingElse )) # space is required around assignment in (( ))

  test command "[ flag filename ]"
    -a, -e true if file exists
    -b true if file exists and is block-oriented
    -c true if file exists and is a character-oriented special file
    -d exists and is directory
    -f regular file
    -g, -u "set group ID" is set
    -p named pipe
    -r is readable
    -s size is greater than zero
    -t descriptor is open and refers to terminal
    -w file is writable
    -x is executable
    -O owned by the effective user ID of user
    -G owned by effective group ID of user
    -L is symlink
    -N modified since last read

    [ -O /etc/passwd ] is the same as `test -O /etc/passwd`

  Control statements
    Case:
      * Like switch-case in other languuages
      * "word" and "pattern" can be an entire word, rather than just one character
      `case word in
        pattern)
          # code
          ;;
      esac`

    For:
      * Similar to python for loop
      * Iterates over everything in word and assigns it to name
      for name in word; do
        # code
      done

    While:
      * Like while, but tests while condition is true
      while test; do
        # code
      done

    Until:
      * Like while, but tests *until* condition is true
      until test; do
        # code
      done

Fri, Oct 7
  Perl!
    12345
    -12345
    18.75
    6.02E23
    0b011011
    0277
    0xdead_beef (underscores are allowed, and ignored)
    "string" (subject to string interpolation)
    'string' (no interpolation)
    (1,2,3)
    
    3 Types
      - Scalars
        * Preceded by $
        * $name
        * $age = 26;
      - Arrays
        * preceded by @
        * @some_array

      - Hashes (Associative arrays)
        * Preceded by %


Fri, Oct 14
  Scalars:
    No 'type' in the usual sence
    $a = "123"
    $b = "456"
    $c = $a + $b; # 579
  
  Arrays
    @a1 = (1); # Array of 1 element
    @a2 = (1,2,3,4,5);
    @a3 = (1..10); # 10 elements
    print @a1," ",@a2," ",@a3, "\n";
    print @a1[0]," ",@a2," ",@a3, "\n";

  Hashes
    %fruit = ('apples', 3, 'oranges', 6);
    print $fruit{'apples'};

  Funtions:
    parentheses are optional
    keys(hash): Returns array containing the keys in the given hash
    values(hash): Returns array containing the values in the given hash


Mon, Oct 17
  Control Statements
  if (condition) {
    #code
  } elsif (condition) {
    #code
  } else {
    #code
  }

  unless (condition) {
  if (!condition) {

  Conditional stuff
  number string
  ==     eq
  !=     ne
  <      lt
  >      gt
  <=     le
  >=     ge
  
  while (condition) {
  until (condition) {
  for($i=0; $i<$max; $i++) {
  foreach $i (0..$max) {
    $_ refers to the value of a foreach loop


  Built in Variables
    $_  Default input/pattern-search
    $0  Program name
    $1, $2...  Arguments
    $.  input ine number
    $$ process id
    $! Error number returned from last subroutine call
    @ARGV Array of command line arguments
    %ENV Hash containing current environment


  Moar operators!!!!!!
    Assoc Operator            
    l     ->            Method call, dereference
          ++ --         Increment/decrement
    r     **            Exponentiation
    r     ! - \ + ~     Unary operators
    l     =~ !~         Matches/doesn't match
    l     * / % x       Matches, doesn't mmatch
    l     + - .         Add, Subtract, String concat
    l     << >>         Left/right bit shift, file test
          < > <= >= lt gt le ge == != <=> eq ne cmp  Comparisons
    l     &             bit and
    l     | ^           bit or/xor
    l     &&            Logical and
    l     ||            Logical or
          .. ...        Range
    r     ?:            Ternary operator
    r     = op=         Assignment
    l     , =>          Comma, arrow list operators
    r     not           Logical not
    l     and           Logical and
    l     or            Logical or

Wed, Oct 19
  Reading from stdin
    @line = <stdin> # Opens the entire file as an array
    foreach $i (@line) {$i}
    while ($line = <stdin>) {$line}
    while (<stdin>) {$_}
  Opening file
    $infile = "input.txt"
    open(infile)
    * Don't use $ for file descriptor(?)
    open(OUTFILE, ">", "out.txt"); # create out.txt
    open(OUTFILE, ">>", "out.txt"); # create out.txt
  Strings
    Concat: $filename = $base . ".bat"
    Contains or Matches: if($a =~ /foo/) {} #/regex/
    Substitution: $a =~ s/foo/bar/
  Subroutines:
  sub max {
    @_[0]; #refers to the argument list:w

  }


Mon, Oct 24
  Netwroking
    Serial connection: in series
      Didn't need a modem (modulator/demodulator)
      56k modem = 56000 characters per second
    Ethernet connection: Multiple computer connected via a network and ethernet cards
      1 mb/sec
      Connectors: AUI, 
      Protocols: Token Ring, CSMA

  x-term
  MAC address; Unique address for each device
  Router: Allows you to connect multiple ethernet cables to a single network. The router routes traffic through each cable to avoid sending traffic to everything on a network
  Gateway: Connect multiple LANs together. UuUuU

Wed, Oct 26
  OSI Network Model
    7 Application
      * How does the program present itself to the end user
    6 Presentation
      * Interface to the user (computer/program)
    5 Session
      * How is the device going to use this information
      * TCP (Transmission Control Protocol) port
    4 Transport
      * IP (Internet Protocol)
    3 Network
      * How do we address this/make a network
      * Ethernet (MAC Address)
    2 Data Link
      * How the data is used
      * Packet size/header format
    1 Physical
      * Determines things like connectors and the voltage to represent 0 and 1

  IP over different networks
    Computer 1
    TCT/IP data
    TCP packet      (TCP header | data)
    IP Packet       (IP  header | TCP Packet)
    Ethernet Packet (Eth header | IP Packet)
    Ethernet LAN
    Ethernet Packet to router running IP
    Token Ring Packet
    Token Ring LAN
    TR Packet       (TR  header | IP Packet)
    IP Packet       (IP  header | TCP Packet)
    TCP packet      (TCP header | data)
    Computer 2

  Ethernet Packet
    Ethernet Destination Addr (1st 32 bits)
    Dest (last 16 bits)
    Source (1st 16 bits)
    Ethernet Source Addr (last 32 bits)
    Data
    Checksum

Fri, Oct 28
  IP Packet Format
    Version
    Header Length
    Type of Service
    Packet Length
    Identification
    Flags
    Time to Live
    Protocol
    Checksum
    Source Address
    Destination Address
    Data
  TCP Packet Format
    Source Port
    Destination Port
    Squence number
    Acknowledgement Number
    Header Length
    Flags
    Checksum
    Data

  Internet Protocol suite
    TCP Reliable 
      HTTP
      SMTP
      FTP
      TELNET
    UDP Unreliable
      DNS
      SNMP
      VoIP


Mon, Oct 31
  Two way handshake protocol
    * User sends packet, server acknowledges reply
  Three way handshake protocol
    * User sends TCP segment with sYN (Sequence Number) = 0 and Sequencce field = x
    * Server sends TcP segment with sYN = 1, acknowledgment field = x+1 and sequence field y
    * User sends TCP segment with acknowledgment field = y+1
  TCP Disconnect protocol
    * When ready to close, send TCP segment with FIN=1, segment=x
    * Server responds with acknowledge y+y
    * Server sends close request with FIN=1, sequence with y, and acknowledge = x+1
    * User send TCP segment with acknowledgment y+1
  DNS
    * 

Wed, Nov 2
  biz   busiess
  com   commercial
  edu   educational
  gov   governmental
  info  unrestricted
  mil   millitary
  net   network service provider
  org   non-profit organization
  XX    two letter country code

  Network Addresses
    32 bit address: Network Address + Host Address (size per each can vary)
    Ex
      Host Address      192.168.110.23
      Network Mask      225.225.225.0 // states how much of address is network addres, and how much is host address
                    //  ^^^^^^^^^^^ Top 24 bits are 1, the last 8 is host address
      Network Portion   192.160. 10.0
      Host portion        0.  0.  0.23
    
    Net Class   Network Mask    Network Address Range
    Class a     255.0.0.0       0.0.0.0   - 127.255.255.255
    Class b     255.255.0.0     128.0.0.0 - 191.255.255.255
    Class c     255.255.255.0   192.0.0.0 - 223.255.255.255

    UI Subnet
      Host Address    192.101.153.33
      Network Mask    255.255.255.192
      Network Portion 192.101.153
      Host Portion               .33

Fri, Nov 4
  NFS: Network file system (Primarily Windows)
  SMB: Samba (Primarily Unix)

  More commands:
    ar: Creates an archive, usually a library
      - creates a .a file
      - Can be used with gcc to only bring in necessary subroutines, rather than the whole object file


Mon, Nov 7
  libc (.a, .so, .dll): Contains most standard libraries (printf, scanf, cin, cout, ect)
  libm: Contains math libs

Wed, Nov 9
  Test on Friday!


Mon, Nov 14
  Makefiles
    # comment
    target: dependency1.c dependency2.c
      build command
    target2: dependency3.c dependency4.c
      build command
  Dependence Graph
    Make creates a graph of dependencies, with the parent rule on top, and dependency rules on bottom
  Make runs the first rule in the file by default
    all: plot_prompt plot_win # This will tell the makefile to run the plot_prompt and plot_win rules
  Clean
    clean:
      rm file1.trash ect # This rule can by run with `make clean` to clean up the directory
  Macros
    OBJS = file1 file2
    OPTIONS = -cog

    plot: ${OBJS}
      gcc ${OPTIONS} ect...


Fri, Dec 2
  Sockets!
    Sockets predate the internet, so they are built to be used on a variety of networks
    One process acts as a client, the other as a server
      - They might be on the same computer, they might be different
      1) Server creates a socket
      2) Client creates an unnamed socket and requests connection
      3) Client makes a connection. Server retains original named socket
    Domain: type of socket we want to create
      - Supported domains include
        * PF_local (the clients and server must be in the same machine, also called PF_UNIX)
        * PF_INET (client and server are on the network)
        * PF_INET6 (The clients and server are on an IPv6 network)
    Types: type of socket determines type of communication that can exist between client and server
      - Main types:
        * SOCK_STREAM (TCP)
        * SOCK_DGRAM (UDP)
    socket() - returns unnamed socket
    bind()   - Associates the unnamed socket represented by file descriptor fd with the socket address stored in address
