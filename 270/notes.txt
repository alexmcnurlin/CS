Professor: Bob Rinker
Office Hours: TBD
Website: www2.cs.uidaho.edu/~rinker/cs270
Final: Dec 15, Thu 15:00-17:00

Mon, Aug 22
  Bell Labs et al contributing to MULTICS (Multiplexed Information and Computing Service)
  MULTICS -> UNICS -> UNIX
  C was invented to write code for UNIX
  People involved
    - Kernigan
    - Ritchie
    - Thompson
  Bell distributed the OS to Universities for low cost.
  Bell Labs started charging liscencing fees. 
  Universities and others made clones (UNIX like) to have similar functionality for free
    - BSD
    - MINIX
  Evenutally, Linus Torvalds made a clone of MINIX to do what he wanted (LINUX)

Wed, Aug 24
  Process: Program in execution

Wed, Aug 31
  Function Declaration: Code that states a function or variable exists (Like a prototype!)
  Function Definition: The actual definition of the code (The function body)
  Function Initialization: Assigning a value to a variable
  Defined once, declared multiple times
  extern: States that a variable is declared in an included file (eg `extern int x`)

Fri, Sep 2
  Elf files
    readelf: reads the elf file
      -a: Shows all data
    Section headers:
      .data: Global initialized data
      .bss: Global uninitialized data

Fri, Sep 9
  elf - Linux only
  coff - Windows (.exe)
  macho - MacOS (.com)

  Linux utilities
    cancel
    cat
    chgrp
    chmod
    chown
    clear
    cp
    dateemacs
    filegroups
    headlp
    lpr
    lprm
    lpq
    lpstat
    ls
    mail
    manmkdir
    moremv
    nnewgrp
    passwd
    pwd
    rm
    rmdir
    rtty
    tailtset
    vim
    wc

Wed, Sep 14
  Contiguous
    * Simple and efficient, but
    * Not very flexible, but
    * other formats strive for it
    - EX: CD-ROM
  Linked List
    * Great for sequential access, but
    * Not so good for random access
    * File Allocation Table (FAT) - links in separate table
    - EX: DOS and FAT (USB drives)
  Indexed
    * Good for both random and sequental access, but
    * Large files require lots of indices
    * Unix uses indirect blocks

  Master Boot Record:
    * BIOS transfers to location 0000h
    * Locate "active" partition
    * Load first sector of partition into memory
    * Transfer execution to that code

Fri, Sep 16
  Declaration:
    Variable or function is said to exist
    extern int i;
  Definition:
    Memory is actually set aside for the variable
    int i;
  Initialization
    Variable is actually assigned a value
    int i = 2;

Mon, Sep 19
  Pointers, again!
    char a[2][15] = {"abc:  ", "a is for apple"};
      - Stored contiguously in memory
    char *p[2] = {"abc:  ", "a is for apple"};
      - Stores 2 pointers, which could be anywhere in memory

  Function arguments
    int main(int argc, char *argv[])
    
    argc - The number of arguments on the command line (including the command name)
    argv - Pointer to the array of pointers to char, an array of strings containing the command line arguments
    argv[0] - The command name itself

Wed, Sep 21
  Classical Squence
    editor -> *source file* -> compiler -> *assembly-language file* -> assembler -> *object file* -> linker -> *executable* ->  loader -> *running program in memory*
  
  Optimization
    - Code generated by a compiler is usually optimized to make it faster, smaller, or both
    - Other optimizations may be done by the assembler, linker, and/or loader
    - A misnomer: The resulting code is better, but not guaranteed to be optimal

    ```
    int i=0;
    while (i<100) {
      a[i++] = x*x*x;
    }

    // Loop invariant removal
    int i=0;
    int temp = x*x*x;
    while (i<100) {
      a[i++] = temp;
    }
    ```

    - Some optimiztions add variables
    - Some remove variables, some add variables. Move code. Add code
    - All make the connection between source code an object code more complicated
    - A simple question, such as "What assembly language code was generated for this statement?" may have a complicated answer.

Mon, Oct 3
  Shell commands
    - alias
      * alias command to a different command
    - bg
    - builtin
    - case..in..esac
    - cd
    - declare
      * Will declare a variable
      * -a Will declare it as an array
    - dirs
    - env
      * Runs a new environment with the specified environment variables
    - export
      * Marks the specified variables for export to the environment. 
    - fg
    - for..do..done
    - function
    - history
    - if..then..elif..then..else..fi
    - jobs
    - kill
    - local
    - popd
    - pushd
    - read
      * Reads a line of text from STDIN
      * read var1 var2
        - Reads first word into var1 and second into var2
    - readonly
    - return
    - select..do..done
    - set
    - source
    - trap
    - unalias
    - unset
    - until..do..done
    - while..do..done

  Variables
    $name, ${name}

  $. current shell options assigned from command line
  $$ process ID for this shell
  $! Process ID of the last basckground command
  $# number of positional parameters
  
  !! replaced with last command
  !n replaced with the nth command in the shell
  !.n replaced with the text of the nth command
  !prefix search for the last command starting with prefix
  !?substring? replaced with the text of the last command containing substring

  (( operation )) 
    - Math!
    - Operators
      +, -, ++, --, *, /, %, **, <=, >=, <, >, ==, !=, 
