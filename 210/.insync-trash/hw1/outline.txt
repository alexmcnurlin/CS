comment
  - Can include multiple lines
  - Always delimited by /* and */
identifier
  - Must start with a letter
  - Made up of letters, digits, and underscores
  - Never more than 256 characters long
string
  - Delimited by double quotes
  - Quotes are included in the lexeme
  - Never more than 256 characters long
keyword
  - accessor and array begin bool case else elsif end exit function if in integer interface is loop module mutator natural null of or others out positive procedure return struct subtype then type when while
character literal
  - Delimited by single quotes
operator
  - . < > (  ) + - * / | & ; , : [  ] = := .. << >> <> <= >= ** != =>
numeric literal
  - Decimal digits 0-9
  - Hexidecimal digits a-fA-F
  - Special characters _ . and #
unknown
  - None of the above. Should not appear in final code




search for letter, followed by any number of letters, digits, and underscores
  - if in keyword list, mark as keyword
  - if not in keyword list, mark as identifier
search for /* until */
  - Mark as comment
search for string delimited by double quotes 
  - Mark as string
search for single character surrounded by single quotes
  - Mark as character
search for operator
  - Mark as character
search for 0-9a-fA-F
If none of the above, mark as unknown


Get first character
  - if letter, go until string doesn't match _a-zA-Z0-9
    * if in keyword list, mark as keyword
    * if not in keyword list, mark as identifier
  - if / check next character
    * if *, find until */ and mark as comment
    * if not *, mark as operator
  - if " go until next "
    * mark as string
  - if ' go until next '
    * throw error if more than one character?
    * mark as character
  - if non / operator
    * if next character is not operator character, only take the one character
    * if next character is operator character, take next character as well
    * mark as operator
  - if 0-9 or _.# a-fA-F? find until next nun-numeric character
    * mark as numeric literal
  - if none of the above
    * mark as UNK
